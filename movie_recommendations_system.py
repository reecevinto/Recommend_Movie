# -*- coding: utf-8 -*-
"""Movie_Recommendations System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gay-f5FReWE2l9F6m2NNcIQjYwskSFFn
"""

import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity

# Load the datasets
movies = pd.read_csv('/content/drive/MyDrive/disney_movies.csv')
ratings = pd.read_csv('/content/drive/MyDrive/Amazon.csv')

# Check the column names of the datasets
print("Movies DataFrame Columns:", movies.columns)
print("Ratings DataFrame Columns:", ratings.columns)

# Create a user-item interaction matrix
user_movie_ratings = ratings.set_index('user_id')

# Fill NaN values with 0
user_movie_ratings = user_movie_ratings.fillna(0)

# Calculate the cosine similarity matrix
item_similarity = cosine_similarity(user_movie_ratings.T)
item_similarity_df = pd.DataFrame(item_similarity, index=user_movie_ratings.columns, columns=user_movie_ratings.columns)

# Function to get movie title from movieId (in this case, just returns the title directly)
def get_movie_title(movie_id):
    return movie_id

# Function to recommend similar movies
def recommend_movies(movie_id, num_recommendations=5):
    if movie_id not in item_similarity_df.index:
        return []
    similar_movies = item_similarity_df[movie_id].sort_values(ascending=False)[1:num_recommendations+1]
    similar_movie_titles = [get_movie_title(movie_id) for movie_id in similar_movies.index]
    return similar_movie_titles

# Function to recommend movies for a user based on their rated movies
def recommend_movies_for_user(user_id, num_recommendations=5):
    user_ratings = user_movie_ratings.loc[user_id]
    rated_movies = user_ratings[user_ratings > 0].index
    if len(rated_movies) > 0:
        movie_to_recommend_from = rated_movies[0]
        return recommend_movies(movie_to_recommend_from, num_recommendations)
    else:
        return []

# Interactive CLI
def interactive_cli():
    print("Welcome to the Movie Recommendation System!")
    while True:
        print("\nMenu:")
        print("1. Get similar movies")
        print("2. Get recommendations for a user")
        print("3. Exit")
        choice = input("Enter your choice (1/2/3): ")
        if choice == '1':
            movie_title = input("Enter the movie title: ")
            if movie_title in user_movie_ratings.columns:
                similar_movies = recommend_movies(movie_title)
                print(f"\nMovies similar to {movie_title}:")
                for movie in similar_movies:
                    print(movie)
            else:
                print("Movie not found in the dataset.")
        elif choice == '2':
            user_id = int(input("Enter the user ID: "))
            if user_id in user_movie_ratings.index:
                recommended_movies = recommend_movies_for_user(user_id)
                print(f"\nMovies recommended for user {user_id}:")
                for movie in recommended_movies:
                    print(movie)
            else:
                print("User ID not found in the dataset.")
        elif choice == '3':
            print("Exiting the system. Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")

# Run the interactive CLI
interactive_cli()

# Save the results to an Excel file
with pd.ExcelWriter('recommendation_system_results.xlsx', engine='openpyxl') as writer:
    movies.to_excel(writer, sheet_name='Movies', index=False)
    ratings.to_excel(writer, sheet_name='Ratings', index=False)
    user_movie_ratings.to_excel(writer, sheet_name='User-Movie Ratings')
    item_similarity_df.to_excel(writer, sheet_name='Item Similarity')